<application>
  <component name="AppStorage">
    <histories>
      <item value="Permitted" />
      <item value="a (very powerful) Instance Level permission:" />
      <item value="test a typed permission (not instance-level)" />
      <item value="schwartz" />
      <item value="role" />
      <item value="test a role:" />
      <item value="/say who they are: //print their identifying principal (in this case, a username):" />
      <item value="say who they are: //print their identifying principal (in this case, a username):" />
      <item value="Locked Account" />
      <item value="Incorrect Credentials" />
      <item value="Sorry, you aren't allowed to drive the 'eagle5' winnebago!" />
      <item value="Sorry, lightsaber rings are for schwartz masters only." />
      <item value="Hello, mere mortal." />
      <item value="User [null] logged in successfully." />
      <item value="You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'. Here are the keys - have fun!" />
      <item value="You may use a lightsaber ring. Use it wisely." />
      <item value="May the Schwartz be with you!" />
      <item value="User [lonestarr] logged in successfully." />
      <item value="Retrieved the correct value! [aValue]" />
      <item value="There is no user with username of" />
      <item value="let's login the current user so we can check against roles and permissions:" />
      <item value="Do some stuff with a Session (no need for a web or EJB container!!!)" />
      <item value="// get the currently executing user:" />
      <item value="// Now that a simple Shiro environment is set up, let's see what you can do:" />
      <item value="// for this simple example quickstart, make the SecurityManager // accessible as a JVM singleton. Most applications wouldn't do this // and instead rely on their container configuration or web.xml for // webapps. That is outside the scope of this simple quickstart, so // we'll just do the bare minimum so you can continue to get a feel // for things." />
      <item value="/ The easiest way to create a Shiro SecurityManager with configured // realms, users, roles and permissions is to use the simple INI config. // We'll do that by using a factory that can ingest a .ini file and // return a SecurityManager instance:" />
      <item value="// The easiest way to create a Shiro SecurityManager with configured // realms, users, roles and permissions is to use the simple INI config. // We'll do that by using a factory that can ingest a .ini file and // return a SecurityManager instance:" />
      <item value="ReflectionException: There is no setter for property named" />
      <item value="There is no setter for property named 'UrlRecord' in" />
      <item value="select * from iprecord" />
      <item value="argument type mismatch" />
      <item value="Mapped Statements collection does not contain value for" />
      <item value="Required Args Constructor" />
      <item value="create By Constructor Signature" />
      <item value="constructor" />
      <item value="The error occurred while handling results" />
      <item value="Persistence Exception" />
      <item value="Talk is cheap" />
      <item value="both methods have same erasure, yet neither overrides the other" />
      <item value="reasonable" />
      <item value="to use a more specifc time zone value if you want to utilize time zone support." />
      <item value="You must configure either the server or JDBC driver" />
      <item value="Communications link failure" />
      <item value="Specialization of {@link Component @Component} for classes that declare * {@link ExceptionHandler @ExceptionHandler}, {@link InitBinder @InitBinder}, or * {@link ModelAttribute @ModelAttribute} methods to be shared across * multiple {@code @Controller} classes." />
      <item value="The class {@code Object} does not itself implement the interface * {@code Cloneable}, so calling the {@code clone} method on an object * whose class is {@code Object} will result in throwing an * exception at run time." />
      <item value="The method {@code clone} for class {@code Object} performs a * specific cloning operation. First, if the class of this object does * not implement the interface {@code Cloneable}, then a * {@code CloneNotSupportedException} is thrown. Note that all arrays * are considered to implement the interface {@code Cloneable} and that * the return type of the {@code clone} method of an array type {@code T[]} * is {@code T[]} where T is any reference or primitive type. * Otherwise, this method creates a new instance of the class of this * object and initializes all its fields with exactly the contents of * the corresponding fields of this object, as if by assignment; the * contents of the fields are not themselves cloned. Thus, this method * performs a &quot;shallow copy&quot; of this object, not a &quot;deep copy&quot; operation. * &lt;p&gt;" />
      <item value="By convention, the object returned by this method should be independent * of this object (which is being cloned). To achieve this independence, * it may be necessary to modify one or more fields of the object returned * by {@code super.clone} before returning it. Typically, this means * copying any mutable objects that comprise the internal &quot;deep structure&quot; * of the object being cloned and replacing the references to these * objects with references to the copies. If a class contains only * primitive fields or references to immutable objects, then it is usually * the case that no fields in the object returned by {@code super.clone} * need to be modified." />
      <item value="By convention, the returned object should be obtained by calling * {@code super.clone}. If a class and all of its superclasses (except * {@code Object}) obey this convention, it will be the case that" />
      <item value="will be {@code true}, but these are not absolute requirements. * While it is typically the case that:" />
      <item value="Creates and returns a copy of this object. The precise meaning * of &quot;copy&quot; may depend on the class of the object. The general * intent is that, for any object {@code x}, the expression:" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="50" />
        <entry key="ENGLISH" value="58" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="7b0177e3f4d09ed0" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>