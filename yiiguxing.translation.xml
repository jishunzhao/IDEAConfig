<application>
  <component name="AppStorage">
    <histories>
      <item value="Thrown to indicate that a malformed URL has occurred. Either no * legal protocol could be found in a specification string or the * string could not be parsed." />
      <item value="Either" />
      <item value="valid" />
      <item value="algorithm" />
      <item value="compression" />
      <item value="quality" />
      <item value="{@link PhantomReference} subclass to track {@link MysqlConnection} objects finalization. * This class holds a reference to the Connection's {@link NetworkResources} so they it can be later closed." />
      <item value="This class implements a thread that is responsible for closing abandoned MySQL connections, i.e., connections that are not explicitly closed. * There is only one instance of this class and there is a single thread to do this task. This thread's executor is statically referenced in this same class." />
      <item value="racks the finalization of a {@link MysqlConnection} object and keeps a reference to its {@link NetworkResources} so that they can be later released." />
      <item value="the target of the method invocation. May be {@code null}." />
      <item value="the value returned by the method, if any" />
      <item value="the method being invoked" />
      <item value="Insert the specified node into the DOM after this node" />
      <item value="terminates" />
      <item value="denoted" />
      <item value="that" />
      <item value="Deletes the file or directory denoted by this abstract pathname. If * this pathname denotes a directory, then the directory must be empty in * order to be deleted." />
      <item value="Requests that the file or directory denoted by this abstract * pathname be deleted when the virtual machine terminates. * Files (or directories) are deleted in the reverse order that * they are registered. Invoking this method to delete a file or * directory that is already registered for deletion has no effect. * Deletion will be attempted only for normal termination of the * virtual machine, as defined by the Java Language Specification." />
      <item value="Retrieves and removes the head of this queue, * or returns {@code null} if this queue is empty. * * @return the head of this queue, or {@code null} if this queue is empty" />
      <item value="transient" />
      <item value="Releases all of the native screen resources used by this * {@code Window}, its subcomponents, and all of its owned * children. That is, the resources for these {@code Component}s * will be destroyed, any memory they consume will be returned to the * OS, and they will be marked as undisplayable." />
      <item value="Disconnected from the target VM" />
      <item value="Gets the last row on the sheet" />
      <item value="Possibly consider using a shorter maxLifetime value" />
      <item value="No operations allowed after connection closed" />
      <item value="Set to true or false, to override the default setting in the container factory." />
      <item value="receiver 1" />
      <item value="exchange" />
      <item value="containing the informal * name of the format." />
      <item value="a &lt;code&gt;String&lt;/code&gt; containing the informal * name of the format." />
      <item value="Couldn't retrieve trigger" />
      <item value="use Legacy Datetime Code" />
      <item value="use JDBC Compliant Timezone Shift" />
      <item value="in your configuration." />
      <item value="Consider defining a bean of type" />
      <item value="The injection point has the following annotations:" />
      <item value="Dependency annotations" />
      <item value="expected at least 1 bean which qualifies as autowire candidate" />
      <item value="Unsatisfied dependency expressed through field 'threefloorImagesService';" />
      <item value="required" />
      <item value="Caught exception while allowing TestExecutionListener" />
      <item value="Permitted" />
      <item value="a (very powerful) Instance Level permission:" />
      <item value="test a typed permission (not instance-level)" />
      <item value="schwartz" />
      <item value="role" />
      <item value="test a role:" />
      <item value="/say who they are: //print their identifying principal (in this case, a username):" />
      <item value="say who they are: //print their identifying principal (in this case, a username):" />
      <item value="Locked Account" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="92" />
        <entry key="ENGLISH" value="100" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="7b0177e3f4d09ed0" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1674392367656" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="CHINESE" />
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="408" />
    <option name="newTranslationDialogY" value="283" />
    <histories>
      <item value="Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. A subsequence of array components are copied from the source array referenced by src to the destination array referenced by dest. The number of components copied is equal to the length argument. The components at positions srcPos through srcPos+length-1 in the source array are copied into positions destPos through destPos+length-1, respectively, of the destination array. If the src and dest arguments refer to the same array object, then the copying is performed as if the components at positions srcPos through srcPos+length-1 were first copied to a temporary array with length components and then the contents of the temporary array were copied into positions destPos through destPos+length-1 of the destination array. If dest is null, then a NullPointerException is thrown. If src is null, then a NullPointerException is thrown and the destination array is not modified. Otherwise, if any of the following is true, an ArrayStoreException is thrown and the destination is not modified:" />
      <item value="The amount by which the capacity of the vector is automatically incremented when its size becomes greater than its capacity. If the capacity increment is less than or equal to zero, the capacity of the vector is doubled each time it needs to grow." />
      <item value="hrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array." />
      <item value="the keyboard mnemonic for the JMenuItem" />
      <item value="A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint. Yield is a heuristic attempt to improve relative progression between threads that would otherwise over-utilise a CPU. Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect. It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions. It may also be useful when designing concurrency control constructs such as the ones in the java.util.concurrent.locks package." />
      <item value="INSTANCE" />
      <item value="instant" />
      <item value="A Reactive Streams Publisher with basic rx operators that emits at most one item via the onNext signal then terminates with an onComplete signal (successful Mono, with or without value), or only emits a single onError signal (failed Mono)." />
      <item value="ndicates that the named compiler warnings should be suppressed in the annotated element (and in all program elements contained in the annotated element). Note that the set of warnings suppressed in a given element is a superset of the warnings suppressed in all containing elements. For example, if you annotate a class to suppress one warning and annotate a method to suppress another, both warnings will be suppressed in the method. As a matter of style, programmers should always use this annotation on the most deeply nested element where it is effective. If you want to suppress a warning in a particular method, you should annotate that method rather than its class." />
      <item value="Determines if the getAuthentication() has any of the specified authorities within Authentication.getAuthorities(). Params: authorities – the authorities to test (i.e. &quot;ROLE_USER&quot;, &quot;ROLE_ADMIN&quot;) Returns: true if any of the authorities is found, else false" />
      <item value="Determines if the getAuthentication() has a particular authority within Authentication.getAuthorities(). This is similar to hasAuthority(String) except that this method implies that the String passed in is a role. For example, if &quot;USER&quot; is passed in the implementation may convert it to use &quot;ROLE_USER&quot; instead. The way in which the role is converted may depend on the implementation settings. Params: role – the authority to test (i.e. &quot;USER&quot;) Returns: true if the authority is found, else false" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="8" />
        <entry key="ENGLISH" value="9" />
      </map>
    </option>
  </component>
</application>